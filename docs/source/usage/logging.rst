Logging
=======

This indipydriver package uses the Python standard library logging module, and emits logs at levels:

*ERROR* Logs errors including tracebacks from exceptions

*INFO* Logs informational messages and error messages.

*DEBUG* Logs xml data transmitted and received, and the info and error messages. The logs of BLOB tags do not include contents.


To log to a file, at the top of your script add::

    import logging
    logger = logging.getLogger()

    fh = logging.FileHandler("logfile.log")
    logger.addHandler(fh)

The default level is WARNING, which means that only events of this level and above will be tracked, to log the xml traffic add the further line::

    logger.setLevel(logging.DEBUG)

This leaves you with the flexibility to add any available loghandler (see the Python logging documentation), and to set your own formats if required.

The xml traffic logs generated with the lines above will be those created by the IPyServer class which has attribute debug_enable set to True as default.

This will be the traffic to and from the server to connected clients, however this will miss snooping traffic sent between drivers. To log driver xml traffic you can set the driver.debug_enable attribute to True, and also the IPyServer add_remote and add_exdriver methods have a debug_enable argument which can be used to enable logging of their traffic.

If more than one debug_enable is set to True your logs will get duplicated traffic, so typically you would only have one debug_enable set.


**Advanced**

The logging.getlogger() command shown above gets the root logger, which gathers all logs generated by all the Python modules in this package. However you can 'get' other loggers by specifying module paths, so::

    serverlogger = logging.getlogger("indipydriver.ipyserver")

Will get a logs from the ipyserver module.

indipydriver.ipyserver - generates server logs

indipydriver.ipydriver - generates attached driver logs

iindipydriver.remotelink - generates remote connection logs.

You could then add file handlers and set logging levels to each logger separately, giving you the capability to separately record driver and server traffic.
